        elif call.data == "all_results":
            
            # 2. Calculate and send statistics
            stats = calculate_statistics(results_df)
            
            # Soddalashtirilgan statistika xabari
            stats_text = "📊 Statistika:\n\n"
            stats_text += f"👥 Jami talabalar soni: {stats['total_students']}\n"
            
            # Add average standard score if it exists
            if 'Standard Score' in results_df.columns:
                avg_standard = results_df['Standard Score'].mean()
                stats_text += f"📝 O'rtacha standart ball: {avg_standard:.1f}\n"
                
            stats_text += f"📝 O'rtacha xom ball: {stats['avg_raw_score']:.2f}\n"
            stats_text += f"✅ O'tish foizi: {stats['pass_rate']:.1f}%\n"
            
            # Display grade counts summary with a cleaner format
            stats_text += "\n📑 Baholar taqsimoti:"
            
            # Use BBM grade order
            grade_order = ['A+', 'A', 'B+', 'B', 'C+', 'C', 'NC']
            
            for grade in grade_order:
                count = grade_counts.get(grade, 0)
                percentage = (count / stats['total_students']) * 100 if stats['total_students'] > 0 else 0
                
                # Only show grades that have at least one student
                if count > 0:
                    # More concise grade description
                    stats_text += f"\n{grade} - {count} talaba ({percentage:.1f}%)"
            
            bot.send_message(
                chat_id=call.message.chat.id,
                text=stats_text
            )
            
            # 3. Create and send grade distribution chart with improved quality
            plt.figure(figsize=(12, 8), dpi=150)
            
            # Prepare the plot in memory
            grade_img_buf = io.BytesIO()
            
            # Plot the grade distribution with improved quality
            grade_distribution_plot(grade_counts, grade_img_buf)
            grade_img_buf.seek(0)
            
            # Send the plot with better caption
            bot.send_photo(
                chat_id=call.message.chat.id,
                photo=grade_img_buf,
                caption="📊 Baholar taqsimoti (Rasch model asosida)"
            )
            
            # 4. Create and send ability distribution chart with improved quality
            plt.figure(figsize=(12, 8), dpi=150)
            
            # Prepare the plot in memory
            ability_img_buf = io.BytesIO()
            
            # Plot the ability distribution with improved quality
            ability_distribution_plot(user_info['ability_estimates'], ability_img_buf)
            ability_img_buf.seek(0)
            
            # Send the plot with better, more informative caption
            bot.send_photo(
                chat_id=call.message.chat.id,
                photo=ability_img_buf,
                caption="📈 Talabalarning qobiliyat taqsimoti\n(Imtihonda ko'rsatilgan natijalarga asoslangan)"
            )
            
            # 5. NEW: Create and send item difficulty analysis chart
            if 'data_df' in user_info and 'beta_values' in user_info:
                plt.figure(figsize=(14, 12), dpi=150)
                
                # Prepare the plot in memory
                item_difficulty_img_buf = io.BytesIO()
                
                # Plot the item difficulty analysis
                item_difficulty_plot(user_info['data_df'], user_info['beta_values'], item_difficulty_img_buf)
                item_difficulty_img_buf.seek(0)
                
                # Send the plot with informative caption
                bot.send_photo(
                    chat_id=call.message.chat.id,
                    photo=item_difficulty_img_buf,
                    caption="📝 Savollar qiyinligi tahlili\n55 ta savolning qiyinlik darajasi va ularga to'g'ri javob bergan talabalar foizi"
                )
                
                # Prepare statistics for top 5 easiest and hardest questions
                difficulty_stats = []
                
                # If we have beta values (difficulty parameters)
                if user_info['beta_values'] is not None and len(user_info['beta_values']) > 0:
                    # Calculate correct answer percentages
                    percentages = []
                    for i in range(len(user_info['beta_values'])):
                        # Find the corresponding column in data_df
                        if i+1 < len(user_info['data_df'].columns):
                            col_name = user_info['data_df'].columns[i+1]  # +1 because first column is student ID
                            correct_count = user_info['data_df'][col_name].sum()
                            total_count = len(user_info['data_df'])
                            percentages.append(100 * correct_count / total_count if total_count > 0 else 0)
                
                    # Create list of (difficulty, question number, percentage)
                    difficulty_with_index = [(beta, i+1, percent) for i, (beta, percent) 
                                            in enumerate(zip(user_info['beta_values'], percentages))]
                    
                    # Sort by difficulty (high values = harder questions)
                    difficulty_with_index.sort(key=lambda x: x[0], reverse=True)
                    
                    # Get top 5 hardest, ideal and easiest questions
                    hardest = difficulty_with_index[:5]  # Eng qiyin 5 ta
                    
                    # Eng ideal (markaziy) 5 ta savolni topish
                    # Savollarni tartiblash
                    sorted_by_abs_diff = sorted(difficulty_with_index, 
                                              key=lambda x: abs(x[0]),  # 0 ga eng yaqin qiymat
                                              reverse=False)  # 0 ga yaqinlik bo'yicha tartiblash
                    ideal = sorted_by_abs_diff[:5]  # 0 ga eng yaqin 5 ta savol
                    
                    # Eng oson 5 ta savol (eng past qiyinlik parametrli)
                    easiest = sorted(difficulty_with_index, key=lambda x: x[0], reverse=False)[:5]
                    
                    # Create messages
                    hardest_text = "🔴 Eng qiyin 5 ta savol:\n"
                    for i, (diff, q_num, percent) in enumerate(hardest):
                        hardest_text += f"{i+1}. #{q_num} savol: Qiyinlik={diff:.2f}, To'g'ri javoblar: {percent:.1f}%\n"
                    
                    ideal_text = "\n🟡 Eng ideal (o'rtacha) 5 ta savol:\n"
                    for i, (diff, q_num, percent) in enumerate(ideal):
                        ideal_text += f"{i+1}. #{q_num} savol: Qiyinlik={diff:.2f}, To'g'ri javoblar: {percent:.1f}%\n"
                    
                    easiest_text = "\n🟢 Eng oson 5 ta savol:\n"
                    for i, (diff, q_num, percent) in enumerate(easiest):
                        easiest_text += f"{i+1}. #{q_num} savol: Qiyinlik={diff:.2f}, To'g'ri javoblar: {percent:.1f}%\n"
                    
                    bot.send_message(
                        chat_id=call.message.chat.id,
                        text=hardest_text + ideal_text + easiest_text
                    )
            
            # 6. Update the main message with back button
            new_markup = types.InlineKeyboardMarkup(row_width=2)
            
            btn_back = types.InlineKeyboardButton('⬅️ Orqaga', callback_data='back_to_menu')
            btn_excel = types.InlineKeyboardButton('💾 Excel formatda yuklash', callback_data='download_excel')
            btn_pdf = types.InlineKeyboardButton('📑 PDF formatda yuklash', callback_data='download_pdf')
            btn_simple_excel = types.InlineKeyboardButton('📝 Nazorat Ballari', callback_data='download_simple_excel')
            
            new_markup.add(btn_back)
            new_markup.add(btn_excel, btn_pdf)
            new_markup.add(btn_simple_excel)
            
            # Qisqa va aniq xabar
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="📊 Statistik ma'lumotlar va tahlillar yuborildi! ✅\n\n"
                     "📈 Har bir diagramma quyidagi ma'lumotlarni o'z ichiga oladi:\n"
                     "• 1️⃣ Baholar taqsimoti diagrammasi\n"
                     "• 2️⃣ Talabalar qobiliyat taqsimoti\n"
                     "• 3️⃣ Savollarning qiyinlik darajasi\n\n"
                     "💾 Excel yoki PDF fayllarni yuklab olish uchun quyidagi tugmalarni bosing 👇",
                reply_markup=new_markup
            )
